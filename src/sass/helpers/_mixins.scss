@use 'sass:map';
@use './variables' as v;
@use './functions' as f;

@mixin breakpoint-up($size) {
    @media (min-width: map-get(v.$breakpoints, $size)) {
        @content;
    }
}

@mixin dimensions(
    $width: auto, $height: auto, $min-width: auto, $min-height: auto, $max-width: none, $max-height: none,
    $mobile-width: null, $mobile-height: null, $mobile-min-width: null, $mobile-min-height: null, $mobile-max-width: null, $mobile-max-height: null, 
    $desktop-width: null, $desktop-height: null, $desktop-min-width: null, $desktop-min-height: null, $desktop-max-width: null, $desktop-max-height: null,
) {
    width: map.get(v.$width, $width) or $width;
    min-width: map.get(v.$width, $min-width) or $min-width;
    max-width: map.get(v.$width, $max-width) or $max-width;
    height: map.get(v.$height, $height) or $height;
    min-height: map.get(v.$width, $min-height) or $min-height;
    max-height: map.get(v.$width, $max-height) or $max-height;
    @include breakpoint-up('mobile') {
        width: map.get(v.$width, $mobile-width) or $mobile-width;
        min-width: map.get(v.$width, $mobile-min-width) or $mobile-min-width;
        max-width: map.get(v.$width, $mobile-max-width) or $mobile-max-width;
        height: map.get(v.$height, $mobile-height) or $mobile-height;
        min-height: map.get(v.$width, $mobile-min-height) or $mobile-min-height;
        max-height: map.get(v.$width, $mobile-max-height) or $mobile-max-height;
    }    
    @include breakpoint-up('desktop') {
        width: map.get(v.$width, $desktop-width) or $desktop-width;
        min-width: map.get(v.$width, $desktop-min-width) or $desktop-min-width;
        max-width: map.get(v.$width, $desktop-max-width) or $desktop-max-width;
        height: map.get(v.$height, $desktop-height) or $desktop-height;
        min-height: map.get(v.$width, $desktop-min-height) or $desktop-min-height;
        max-height: map.get(v.$width, $desktop-max-height) or $desktop-max-height;
    }
}

@mixin margins(
    $margin-inline: 0, $margin-block: 0, 
    $mobile-margin-inline: null, $mobile-margin-block: null, 
    $desktop-margin-inline: null, $desktop-margin-block: null
) {
    margin-inline: map.get(v.$margin, $margin-inline) or $margin-inline;
    margin-block: map.get(v.$margin, $margin-block) or $margin-block;
    @include breakpoint-up('mobile') {
        margin-inline: map.get(v.$margin, $mobile-margin-inline) or $mobile-margin-inline;
        margin-block: map.get(v.$margin, $mobile-margin-block) or $mobile-margin-block;
    }    
    @include breakpoint-up('desktop') {
        margin-inline: map.get(v.$margin, $desktop-margin-inline) or $desktop-margin-inline;
        margin-block: map.get(v.$margin, $desktop-margin-block) or $desktop-margin-block;
    }
}

@mixin paddings(
    $padding-inline: 0, $padding-block: 0, 
    $mobile-padding-inline: null, $mobile-padding-block: null, 
    $desktop-padding-inline: null, $desktop-padding-block: null
) {
    padding-inline: map.get(v.$padding, $padding-inline) or $padding-inline;
    padding-block: map.get(v.$padding, $padding-block) or $padding-block;
    @include breakpoint-up('mobile') {
        padding-inline: map.get(v.$padding, $mobile-padding-inline) or $mobile-padding-inline;
        padding-block: map.get(v.$padding, $mobile-padding-block) or $mobile-padding-block;
    }    
    @include breakpoint-up('desktop') {
        padding-inline: map.get(v.$padding, $desktop-padding-inline) or $desktop-padding-inline;
        padding-block: map.get(v.$padding, $desktop-padding-block) or $desktop-padding-block;
    }
}

@mixin border(
    $border: none, $border-radius: 0, 
    $mobile-border: null, $mobile-border-radius: null, 
    $desktop-border: null, $desktop-border-radius: null
) {
    border: map.get(v.$border, $border) or $border;
    border-radius: map.get(v.$border, $border-radius) or $border-radius;
    @include breakpoint-up('mobile') {
        border: map.get(v.$border, $mobile-border) or $mobile-border;
        border-radius: map.get(v.$border, $mobile-border-radius) or $mobile-border-radius;
    }    
    @include breakpoint-up('desktop') {
        border: map.get(v.$border, $desktop-border) or $desktop-border;
        border-radius: map.get(v.$border, $desktop-border-radius) or $desktop-border-radius;
    }
}

@mixin font(
    $font-family: 'ff-sansSerif-root', $font-size: 'fs-root--standard', $font-weight: 'fw-root', $letter-spacing: 'ls-root', $line-height: 'lh-root',
    $mobile-font-family: null, $mobile-font-size: null, $mobile-font-weight: null, $mobile-letter-spacing: null, $mobile-line-height: null,
    $desktop-font-family: null, $desktop-font-size: null, $desktop-font-weight: null, $desktop-letter-spacing: null, $desktop-line-height: null
) {
    font-family: map.get(v.$font, $font-family) or $font-family;
    font-size: map.get(v.$font, $font-size) or $font-size;
    font-weight: map.get(v.$font, $font-weight) or $font-weight;
    letter-spacing: map.get(v.$font, $letter-spacing) or $letter-spacing;
    line-height: map.get(v.$font, $line-height) or $line-height;
    @include breakpoint-up('mobile') {
        font-family: map.get(v.$font, $mobile-font-family) or $mobile-font-family;
        font-size: map.get(v.$font, $mobile-font-size) or $mobile-font-size;
        font-weight: map.get(v.$font, $mobile-font-weight) or $mobile-font-weight;
        letter-spacing: map.get(v.$font, $mobile-letter-spacing) or $mobile-letter-spacing;
        line-height: map.get(v.$font, $mobile-line-height) or $mobile-line-height;
    }    
    @include breakpoint-up('desktop') {
        font-family: map.get(v.$font, $desktop-font-family) or $desktop-font-family;
        font-size: map.get(v.$font, $desktop-font-size) or $desktop-font-size;
        font-weight: map.get(v.$font, $desktop-font-weight) or $desktop-font-weight;
        letter-spacing: map.get(v.$font, $desktop-letter-spacing) or $desktop-letter-spacing;
        line-height: map.get(v.$font, $desktop-line-height) or $desktop-line-height;
    }    
}

@mixin flexbox(
    $direction: row, $justify-content: normal, $align-items: normal, $wrap: nowrap, $gap: (normal normal),
    $mobile-direction: null, $mobile-justify-content: null, $mobile-align-items: null, $mobile-wrap: null, $mobile-gap: null,
    $desktop-direction: null, $desktop-justify-content: null, $desktop-align-items: null, $desktop-wrap: null, $desktop-gap: null
) {
    display: flex;
    flex-direction: map.get(v.$flex, $direction) or $direction;
    justify-content: map.get(v.$flex, $justify-content) or $justify-content;
    align-items: map.get(v.$flex, $align-items) or $align-items;
    flex-wrap: map.get(v.$flex, $wrap) or $wrap;
    gap: map.get(v.$flex, $gap) or $gap;
    @include breakpoint-up('mobile') {
        flex-direction: map.get(v.$flex, $mobile-direction) or $mobile-direction;
        justify-content: map.get(v.$flex, $mobile-justify-content) or $mobile-justify-content;
        align-items: map.get(v.$flex, $mobile-align-items) or $mobile-align-items;
        flex-wrap: map.get(v.$flex, $mobile-wrap) or $mobile-wrap;
        gap: map.get(v.$flex, $mobile-gap) or $mobile-gap;
    }    
    @include breakpoint-up('desktop') {
        flex-direction: map.get(v.$flex, $desktop-direction) or $desktop-direction;
        justify-content: map.get(v.$flex, $desktop-justify-content) or $desktop-justify-content;
        align-items: map.get(v.$flex, $desktop-align-items) or $desktop-align-items;
        flex-wrap: map.get(v.$flex, $desktop-wrap) or $desktop-wrap;
        gap: map.get(v.$flex, $desktop-gap) or $desktop-gap;
    }  
}

@mixin grid(
    $template-cols: 1fr, $template-rows: none, $gap: (normal normal), $align-items: normal, $justify-items: legacy,
    $mobile-template-cols: null, $mobile-template-rows: null, $mobile-gap: null, $mobile-align-items: null, $mobile-justify-items: null,
    $desktop-template-cols: null, $desktop-template-rows: null, $desktop-gap: null, $desktop-align-items: null, $desktop-justify-items: null
) {
    display: grid;
    grid-template-columns: map.get(v.$grid, $template-cols) or $template-cols;
    grid-template-rows: map.get(v.$grid, $template-rows) or $template-rows;
    gap: map.get(v.$grid, $gap) or $gap;
    align-items: map.get(v.$grid, $align-items) or $align-items;
    justify-items: map.get(v.$grid, $justify-items) or $justify-items;
    @include breakpoint-up('mobile') {
        grid-template-columns: map.get(v.$grid, $mobile-template-cols) or $mobile-template-cols;
        grid-template-rows: map.get(v.$grid, $mobile-template-rows) or $mobile-template-rows;
        gap: map.get(v.$grid, $mobile-gap) or $mobile-gap;
        align-items: map.get(v.$grid, $mobile-align-items) or $mobile-align-items;
        justify-items: map.get(v.$grid, $mobile-justify-items) or $mobile-justify-items;
    }
    @include breakpoint-up('desktop') {
        grid-template-columns: map.get(v.$grid, $desktop-template-cols) or $desktop-template-cols;
        grid-template-rows: map.get(v.$grid, $desktop-template-rows) or $desktop-template-rows;
        gap: map.get(v.$grid, $desktop-gap) or $desktop-gap;
        align-items: map.get(v.$grid, $desktop-align-items) or $desktop-align-items;
        justify-items: map.get(v.$grid, $desktop-justify-items) or $desktop-justify-items;
    }    
}

@mixin position(
    $position: static, $top: auto, $right: auto, $bottom: auto, $left: auto,
    $mobile-position: null, $mobile-top: null, $mobile-right: null, $mobile-bottom: null, $mobile-left: null,
    $desktop-position: null, $desktop-top: null, $desktop-right: null, $desktop-bottom: null, $desktop-left: null
) {
    position: map.get(v.$position, $position) or $position;
    top: map.get(v.$position, $top) or $top;
    right: map.get(v.$position, $right) or $right;
    bottom: map.get(v.$position, $bottom) or $bottom;
    left: map.get(v.$position, $left) or $left;
    @include breakpoint-up('mobile') {
        position: map.get(v.$position, $mobile-position) or $mobile-position;
        top: map.get(v.$position, $mobile-top) or $mobile-top;
        right: map.get(v.$position, $mobile-right) or $mobile-right;
        bottom: map.get(v.$position, $mobile-bottom) or $mobile-bottom;
        left: map.get(v.$position, $mobile-left) or $mobile-left;
    }    
    @include breakpoint-up('desktop') {
        position: map.get(v.$position, $desktop-position) or $desktop-position;
        top: map.get(v.$position, $desktop-top) or $desktop-top;
        right: map.get(v.$position, $desktop-right) or $desktop-right;
        bottom: map.get(v.$position, $desktop-bottom) or $desktop-bottom;
        left: map.get(v.$position, $desktop-left) or $desktop-left;
    }    
}

@mixin transition($transition: 'transition-root') {
    transition: map.get(v.$transition, $transition) or $transition;
}

@mixin animation($animation: null) {
    animation: map.get(v.$animation, $animation) or $animation;
}

@mixin overflow($overflow: visible) {
overflow: map.get(v.$overflow, $overflow) or $overflow;
}

@mixin filter($filter: none) {
    filter: map.get(v.$filter, $filter) or $filter;
}

@mixin hidden(
    $display: null, $visibility: null,
    $mobile-display: null, $mobile-visibility: null,
    $desktop-display: null, $desktop-visibility: null
) {
    display: map.get(v.$visibleStatus, $display) or $display;
    visibility: map.get(v.$visibleStatus, $visibility) or $visibility;
    @include breakpoint-up('mobile') {
        display: map.get(v.$visibleStatus, $mobile-display) or $mobile-display;
        visibility: map.get(v.$visibleStatus, $mobile-visibility) or $mobile-visibility;
    }
    @include breakpoint-up('desktop') {
        display: map.get(v.$visibleStatus, $desktop-display) or $desktop-display;
        visibility: map.get(v.$visibleStatus, $desktop-visibility) or $desktop-visibility;
    }
}

@mixin visible(
    $display: null, $visibility: null,
    $mobile-display: null, $mobile-visibility: null,
    $desktop-display: null, $desktop-visibility: null
) {
    display: map.get(v.$visibleStatus, $display) or $display;
    visibility: map.get(v.$visibleStatus, $visibility) or $visibility;
    @include breakpoint-up('mobile') {
        display: map.get(v.$visibleStatus, $mobile-display) or $mobile-display;
        visibility: map.get(v.$visibleStatus, $mobile-visibility) or $mobile-visibility;
    }
    @include breakpoint-up('desktop') {
        display: map.get(v.$visibleStatus, $desktop-display) or $desktop-display;
        visibility: map.get(v.$visibleStatus, $desktop-visibility) or $desktop-visibility;
    }
}

@mixin button() {
    @include flexbox(
        $direction: column,
        $justify-content: center,
        $align-items: center
    ); 
    @include paddings(
        $padding-block: f.rem(10), 
        $padding-inline: f.rem(20)
    );
    @include text-align($align: center);
    @include transition();

}

@mixin button-filled() {
    @include button();
    color: white; 
    background-color: black;
}

@mixin button-outline() {
    @include button();
    color: black; 
    background-color: white;
    @include border($border: f.rem(1) solid black);
}

@mixin anchor() {
    @include flexbox(
        $direction: column,
        $justify-content: center,
        $align-items: center
    ); 
    @include paddings(
        $padding-block: f.rem(10), 
        $padding-inline: f.rem(20)
    );
    @include transition();
    text-align: center;
}

@mixin anchor-black-filled() {
    @include anchor();
    background-color: black;
    color: white;
}

@mixin anchor-black-outline() {
    @include anchor();
    background-color: transparent;
    color: black;
}

@mixin anchor-white-filled() {
    @include anchor();
    background-color: white;
    color: black;
}

@mixin anchor-white-outline() {
    @include anchor();
    background-color: transparent;
    color: white;
}


@mixin section-route() {
    @include flexbox(
        $direction: column, 
        $justify-content: center
    );
    @include paddings(
        $padding-block: f.rem(10), 
        $padding-inline: f.rem(10),
        $mobile-padding-block: f.rem(20), 
        $mobile-padding-inline: f.rem(20)
    );
    @include dimensions(
        $width: 100%, 
        $max-width: f.rem(1200)
    );
@include margins($margin-inline: auto);
}

@mixin vertical-text() {
    writing-mode: horizontal-tb;
    @include breakpoint-up('mobile') {
        writing-mode: vertical-rl;
    }
    text-orientation: upright;
}

@mixin text-align($align: start, $mobile-align: null, $desktop-align: null) {
    text-align: map.get(v.$align, $align) or $align;
    @include breakpoint-up('mobile') {
        text-align: map.get(v.$align, $mobile-align) or $mobile-align;
    }    
    @include breakpoint-up('desktop') {
        text-align: map.get(v.$align, $desktop-align) or $desktop-align;
    } 
}

